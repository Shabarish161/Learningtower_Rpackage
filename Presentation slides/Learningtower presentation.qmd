---
title: "Learningtower: Comparative Analysis of PISA 2022 and Historical Data"
title-slide-attributes: 
  data-background-image: "../images/bg.png"
  data-background-size: 100%
author: "Shabarish Sai and Guan Ru Chen"
date: "18 Oct 2024"
institute: "Department of Econometrics and Business Statistics"
format:
  revealjs:
    multiplex: false
    slide-number: c/t
    slide-tone: false
    theme: "../assets/monash.scss"
    width: 1600
    height: 900
    margin: 0.05
    embed-resources: true
---

```{r include=FALSE}
library(tidyverse)
library(dplyr)
library(ggplot2)
library(here)
library(patchwork)
library(plotly)
library(kableExtra)
library(learningtower)
library(ggbeeswarm)
library(gghighlight)
library(ggrepel)
library(viridis)
library(brolgar)
```

```{r, include = FALSE}
source(here("setup.R"))
```

```{r include=FALSE}
student_2022_full <- readRDS("../Data/student_2022.rds")
load("../data/countrycode.rda")
load("../data/student.rda")
load("../data/student_data_2018_2022.rda")
load("../data/math_diff_conf_intervals.rda")
load("../data/read_diff_conf_intervals.rda")
load("../data/sci_diff_conf_intervals.rda")
load("../data/father_qual_math_read_sci_data.rda")
load("../data/mother_qual_math_read_sci_data.rda")
load("../data/int_math_read_sci_data.rda")
load("../data/comp_math_read_sci_data.rda")

student_country <- left_join(student_2022_full,
                             countrycode, by = "country")

#calculating the weighted means for all three subjects and plotting them
w_mean = function(x, w){weighted.mean(x = x, w = w, na.rm=TRUE)}
```

## Contributors 
:::: {.columns}

::: {.column width="20%"}
<img src="../images/brickwork.png">
Shabarish Sai Subramanian
:::

::: {.column width="20%"}
<img src="../images/brickwork.png">
Guan Ru, Chen
:::

::: {.column width="20%"}
<img src="../images/brickwork.png">
Dianne Cook
:::

::: {.column width="20%"}
<img src="../images/brickwork.png">
Kevin Y.X. Wang
:::

::: {.column width="20%"}
<img src="../images/brickwork.png">
Priya Ravindra Dingorkar
:::

::::




## Introduction {.transition-slide .center style="text-align: center;"}


## `Learningtower` Package {background-image="../images/logo.png" background-position="90% 5%" background-size="14%"}

<br><br><br><br>
The `Learningtower` package provides access to PISA datasets from 2000 to 2022, allowing researchers to explore trends in education, student performance, and other contextual factors. 

In `Learningtower` contain mainly 3 datasets:

- [Student]{.monash-blue2} is a dataset of students scores in mathematics, reading and science.
- [School]{.monash-blue2} is a dataset of school's detailed information, i.e. school weight, school funding distribution, private/public sectors, etc.
- [Countrycode]{.monash-blue2} is a dataset of a mapping of a country/regionâ€™s ISO code to its full name.


## What is PISA (Programme for International Student Assessment)? 

::: {.callout-tip title="Global Examination"}
Measures student performance in reading, math, and science
:::

::: {.callout-tip title="Target Group"}
Assesses 15-year-old students' knowledge and skills
:::

::: {.callout-tip title="Global Reach"}
81 OECD member countries, 700,000+ students in **2022**
:::

:::{.callout-tip title="Educational Environment Research"}
Additional questionnaires done by students, teachers, and school principals to gather contextual data on educational environments, socio-economic status, and more.
:::

## Methodology

## PISA Dataset

```{r Dataset}
#| echo: false

kable(head(student_2022_full)) |> 
  kable_paper() |> 
  scroll_box(width = "100%", height = "50%")
```


## Variable Description
From original dataset, We collect the following variables:

- [**Year**]{.monash-blue2}

- [**Country**]{.monash-blue2}

- [**School**]{.monash-blue2}

- [**Student information**]{.monash-blue2}: ID, gender, test scores, student weight

- [**Economic factors**]{.monash-blue2}: Parent's education level, household belongings(i.e. computer, internet, etc.) as well as constructed index like `escs`. 




## Gender Gap Analysis {.transition-slide .center style="text-align: center;"}


## Math
:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: false

math_score <- student_data_2018_2022 %>% 
  group_by(country, year) %>%  
  dplyr::filter(country %in% c("AUS", "NZL", "JPN" , "SGP", 
                               "SAU", "TUR", "USA", "FIN",
                               "UKR", "BRA", "ARG", "MAR")) %>% 
  dplyr::summarise(avg_math = mean(math, na.rm = TRUE)) %>%  
  left_join(countrycode, by = "country") %>% 
  dplyr::select(country_name, year, avg_math) %>% 
  ungroup() %>% 
  dplyr::mutate(
    year = year %>% as.character %>% as.integer, 
    label_x_pos = ifelse(year == 2018, 2018 - 2, 2022 + 1),
    label = ifelse(
      year == 2018,
      paste0(country_name, ", ", round(avg_math)),
      round(avg_math)))
  
math_score_plot <- math_score %>% 
  ggplot(aes(x = year, 
             y = avg_math,
             label = label,
             colour = country_name)) +
  geom_point() +
  geom_line() +
  geom_vline(xintercept=2018,
             linetype="dashed",
             linewidth=0.1) +
  geom_vline(xintercept=2022,
             linetype="dashed",
             linewidth=0.1) + 
  geom_text(aes(x = label_x_pos),
            position = position_nudge(y = 0)) +
  scale_x_continuous(breaks = c(2018, 2022),
                     limits = c(2014, 2024)) +
  scale_colour_manual(values = c("#1F77B4FF", "#FF7F0EFF", "#2CA02CFF", "#D62728FF", 
                                 "#9467BDFF", "#8C564BFF", "#E377C2FF", "#7F7F7FFF",
                                 "#17BECFFF", "#BCBD22FF", "#F7B6D2FF", "#AEC7E8FF")) +
  labs(x = "",
       y = "Average maths score") +
  theme_classic() +
  theme(axis.ticks.y = element_blank(),
        axis.text.y = element_blank(),
        legend.position = "none")

ggplotly(math_score_plot) |> 
  config(displayModeBar = FALSE)
```
:::
  
  
::: {.column width="50%"}
```{r}
#| echo: false
#| 

math_diff_conf_intervals <- math_diff_conf_intervals %>%
  dplyr::filter(country_name %in%
                  c("Australia",
                    "New Zealand",
                    "Japan",
                    "Singapore",
                    "Saudi Arabia",
                    "Turkey",
                    "United States",
                    "Finland",
                    "Ukraine",
                    "Brazil",
                    "Argentina",
                    "Morocco")) 
  
diff_math_plot <- ggplot(math_diff_conf_intervals,
                    aes(diff, country_name,
                        col = score_class)) +
  scale_colour_manual("",
      values = c("boys"="#3288bd",
                 "nodiff"="#969696",
                 "girls"="#f46d43")) +
  geom_point() +
  geom_errorbar(aes(xmin = lower, xmax = upper), width=0) +
  geom_vline(xintercept = 0, color = "#969696") +
  labs(y = "",
  x = "",
  title = "Math"
  ) +
  theme(legend.position="none") +
  annotate("text", x = 50, y = 1, label = "Girls") +
  annotate("text", x = -50, y = 1, label = "Boys") +
  scale_x_continuous(limits = c(-70, 70),
                     breaks = seq(-60, 60, 20),
                     labels = abs(seq(-60, 60, 20)))+
  theme(legend.position="right")
diff_math_plot
```
:::
  
::::

## Reading

:::: {.columns}

::: {.column width="50%"}
```{r}
#| echo: false
read_score <- student_data_2018_2022 %>% 
  group_by(country, year) %>%  
  dplyr::filter(country %in% c("AUS", "NZL", "JPN" , "SGP", 
                               "SAU", "TUR", "USA", "FIN",
                               "UKR", "BRA", "ARG", "MAR")) %>% 
  dplyr::summarise(avg_read = mean(read, na.rm = TRUE)) %>%  
  left_join(countrycode, by = "country") %>% 
  dplyr::select(country_name, year, avg_read) %>% 
  ungroup() %>% 
  dplyr::mutate(
    year = year %>% as.character %>% as.integer, 
    label_x_pos = ifelse(year == 2018, 2018 - 2, 2022 + 1),
    label = ifelse(
      year == 2018,
      paste0(country_name, ", ", round(avg_read)),
      round(avg_read)))
  
read_score_plot <- read_score %>% 
  ggplot(aes(x = year, 
             y = avg_read,
             label = label,
             colour = country_name)) +
  geom_point() +
  geom_line() +
  geom_vline(xintercept=2018,
             linetype="dashed",
             linewidth=0.1) +
  geom_vline(xintercept=2022,
             linetype="dashed",
             linewidth=0.1) + 
  geom_text(aes(x = label_x_pos),
            position = position_nudge(y = 0)) +
  scale_x_continuous(breaks = c(2018, 2022),
                     limits = c(2014, 2024)) +
  scale_colour_manual(values = c("#1F77B4FF", "#FF7F0EFF", "#2CA02CFF", "#D62728FF", 
                                 "#9467BDFF", "#8C564BFF", "#E377C2FF", "#7F7F7FFF",
                                 "#17BECFFF", "#BCBD22FF", "#F7B6D2FF", "#AEC7E8FF")) +
  labs(x = "",
       y = "Average reading score") +
  theme_classic() +
  theme(axis.ticks.y = element_blank(),
        axis.text.y = element_blank(),
        legend.position = "none")
ggplotly(read_score_plot) |> 
  config(displayModeBar = FALSE)
```
:::
  
::: {.column width="50%"}
```{r}
#| echo: false

read_diff_conf_intervals <- read_diff_conf_intervals %>%
  dplyr::filter(country_name %in%
                  c("Australia",
                    "New Zealand",
                    "Japan",
                    "Singapore",
                    "Saudi Arabia",
                    "Turkey",
                    "United States",
                    "Finland",
                    "Ukraine",
                    "Brazil",
                    "Argentina",
                    "Morocco")) 
  
diff_read_plot <- ggplot(read_diff_conf_intervals,
                    aes(diff, country_name,
                        col = score_class)) +
  scale_colour_manual("",
      values = c("boys"="#3288bd",
                 "nodiff"="#969696",
                 "girls"="#f46d43")) +
  geom_point() +
  geom_errorbar(aes(xmin = lower, xmax = upper), width=0) +
  geom_vline(xintercept = 0, color = "#969696") +
  labs(y = "",
  x = "",
  title = "Reading"
  ) +
  theme(legend.position="none") +
  annotate("text", x = 50, y = 1, label = "Girls") +
  annotate("text", x = -50, y = 1, label = "Boys") +
  scale_x_continuous(limits = c(-70, 70),
                     breaks = seq(-60, 60, 20),
                     labels = abs(seq(-60, 60, 20)))
diff_read_plot
```
:::
::::


## Science
:::: {.columns}

::: {.column width="50%"}
```{r}
#| echo: false
sci_score <- student_data_2018_2022 %>% 
  group_by(country, year) %>%  
  dplyr::filter(country %in% c("AUS", "NZL", "JPN" , "SGP", 
                               "SAU", "TUR", "USA", "FIN",
                               "UKR", "BRA", "ARG", "MAR")) %>% 
  dplyr::summarise(avg_sci = mean(science, na.rm = TRUE)) %>%  
  left_join(countrycode, by = "country") %>% 
  dplyr::select(country_name, year, avg_sci) %>% 
  ungroup() %>% 
  dplyr::mutate(
    year = year %>% as.character %>% as.integer, 
    label_x_pos = ifelse(year == 2018, 2018 - 2, 2022 + 1),
    label = ifelse(
      year == 2018,
      paste0(country_name, ", ", round(avg_sci)),
      round(avg_sci)))
  
sci_score_plot <- sci_score %>% 
  ggplot(aes(x = year, 
             y = avg_sci,
             label = label,
             colour = country_name)) +
  geom_point() +
  geom_line() +
  geom_vline(xintercept=2018,
             linetype="dashed",
             linewidth=0.1) +
  geom_vline(xintercept=2022,
             linetype="dashed",
             linewidth=0.1) + 
  geom_text(aes(x = label_x_pos),
            position = position_nudge(y = 0)) +
  scale_x_continuous(breaks = c(2018, 2022),
                     limits = c(2014, 2024)) +
  scale_colour_manual(values = c("#1F77B4FF", "#FF7F0EFF", "#2CA02CFF", "#D62728FF", 
                                 "#9467BDFF", "#8C564BFF", "#E377C2FF", "#7F7F7FFF",
                                 "#17BECFFF", "#BCBD22FF", "#F7B6D2FF", "#AEC7E8FF")) +
  labs(x = "",
       y = "Average science score") +
  theme_classic() +
  theme(axis.ticks.y = element_blank(),
        axis.text.y = element_blank(),
        legend.position = "none")
ggplotly(sci_score_plot) |> 
  config(displayModeBar = FALSE)
```
:::
  
::: {.column width="50%"}
```{r}
#| echo: false

sci_diff_conf_intervals <- sci_diff_conf_intervals %>%
  dplyr::filter(country_name %in%
                  c("Australia",
                    "New Zealand",
                    "Japan",
                    "Singapore",
                    "Saudi Arabia",
                    "Turkey",
                    "United States",
                    "Finland",
                    "Ukraine",
                    "Brazil",
                    "Argentina",
                    "Morocco")) 
  
diff_sci_plot <- ggplot(sci_diff_conf_intervals,
                    aes(diff, country_name,
                        col = score_class)) +
  scale_colour_manual("",
      values = c("boys"="#3288bd",
                 "nodiff"="#969696",
                 "girls"="#f46d43")) +
  geom_point() +
  geom_errorbar(aes(xmin = lower, xmax = upper), width=0) +
  geom_vline(xintercept = 0, color = "#969696") +
  labs(y = "",
  x = "",
  title = "Science"
  ) +
  theme(legend.position="none") +
  annotate("text", x = 50, y = 1, label = "Girls") +
  annotate("text", x = -50, y = 1, label = "Boys") +
  scale_x_continuous(limits = c(-70, 70),
                     breaks = seq(-60, 60, 20),
                     labels = abs(seq(-60, 60, 20)))
diff_sci_plot
```
:::
::::


## World Map

```{r}
#| echo: false
theme_map <- function(...) {
  theme_minimal() +
  theme(
    text = element_text(),
    axis.line = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank()
  )
}

region2country = function(region_name){
  country_name = case_when(
    region_name == "Brunei Darussalam" ~ "Brunei",
    region_name == "United Kingdom" ~ "UK",
    region_name %in% c("Macau SAR China", "B-S-J-Z (China)",
                        "Hong Kong SAR China") ~ "China",
    region_name == "Korea" ~ "South Korea",
    region_name == "North Macedonia" ~ "Macedonia",
    region_name == "Baku (Azerbaijan)" ~ "Baku",
    region_name %in% c("Moscow Region (RUS)", "Tatarstan (RUS)",
                        "Russian Federation") ~ "Russia",
    region_name == "Slovak Republic" ~ "Slovakia",
    region_name == "Chinese Taipei" ~ "Taiwan",
    region_name == "United States" ~ "USA",
    TRUE ~ as.character(region_name))
}
```

```{r}
#| echo: false
world_map <- map_data("world") %>%
  filter(region != "Antarctica") %>%
  fortify() %>%
  rename(country_name = region)

math_map_data <- math_diff_conf_intervals  %>%
  dplyr::mutate(country_name = region2country(region_name = country_name)) 

math_world_data <- full_join(
  x = math_map_data,
  y = world_map,
  by = "country_name") %>% 
  rename(Country = country_name,
         math = diff) %>%
  mutate(math = round(math, digits = 2))
```

```{r}
#| echo: false
read_map_data <- read_diff_conf_intervals %>%
  dplyr::mutate(country_name = region2country(region_name = country_name))

read_world_data <- full_join(
  x = read_map_data,
  y = world_map,
  by = "country_name") %>% 
  rename(Country = country_name,
         Reading = diff) %>%
  mutate(Reading = round(Reading, digits = 2))
```

```{r}
#| echo: false
sci_map_data <- sci_diff_conf_intervals %>%
  dplyr::mutate(country_name = region2country(region_name = country_name))

sci_world_data <- full_join(
  x = sci_map_data,
  y = world_map,
  by = "country_name") %>% 
  rename(Country = country_name,
         Science = diff)  %>%
  mutate(Science = round(Science, digits = 2))
```

```{r}
#| echo: false
math_dat <- math_world_data %>%
  dplyr::select(Country, math, lat, long, group)

read_dat <- read_world_data %>%
  dplyr::select(Country, Reading, lat, long, group)

sci_dat <- sci_world_data %>%
  dplyr::select(Country, Science, lat, long, group)

math_read_dat <- left_join(math_dat,
                           read_dat,
                           by = c("Country","lat", "long", "group"))

math_read_sci_dat <- left_join(math_read_dat,
                           sci_dat,
                           by = c("Country","lat", "long", "group"))

math_read_sci_dat_wider <- math_read_sci_dat %>%
    pivot_longer(cols = c(2,6,7), names_to = "subjects")

mrs_maps <- ggplot(math_read_sci_dat_wider,
       aes(x = long,
           y = lat,
           group = group)) +
  geom_polygon(aes(fill= value,
                   label = Country)) +
  facet_wrap(~subjects, scales = "free", nrow = 3) +
  theme_map() +
  labs(title = "World Map displaying Gender Gap Scores in Math, Reading and Science")  +
  scale_fill_distiller(palette = "Spectral")
```

```{r}
#| fig-width: 12
#| fig-height: 8
#| echo: false

ggplotly(mrs_maps)
```



## EcoSocio Factors Analysis {.transition-slide .center style="text-align: center;"}

## Parent's Education
```{r}
#| echo: false
mother_qual_math <- ggplot(mother_qual_math_read_sci_data,
       aes(x=`Mother's Education`,
           y=math_avg,
           col=`Mother's Education`)) +
  geom_quasirandom(size = 1.7,
             cex = 3) +
  geom_line(aes(group = country_name),
            size=0.5, alpha=.36) +
  scale_fill_viridis(discrete = TRUE,
                     option = "A",
                      alpha=0.2) +
  stat_summary(fun.y = median,
               fun.ymin = median,
               fun.ymax = median,
               geom = "crossbar",
               width = 0.5,
               col = "black") +
  theme(legend.position="none",
      plot.title = element_text(size=11)) +
  labs(y = "Average Mathematics Score",
       x = "Mother's Qualification",
       title = "math Scores and Mother's Qualification")

father_qual_math <- ggplot(father_qual_math_read_sci_data,
       aes(x=`Father's Education`,
           y=math_avg,
           col=`Father's Education`)) +
  geom_quasirandom(size = 1.7,
             cex = 3) +
  geom_line(aes(group = country_name),
            size=0.5, alpha=.36) +
  scale_fill_viridis(discrete = TRUE,
                     option = "A",
                      alpha=0.2) +
  stat_summary(fun.y = median,
               fun.ymin = median,
               fun.ymax = median,
               geom = "crossbar",
               width = 0.5,
               col = "black") +
  theme(legend.position="none",
      plot.title = element_text(size=11)) +
  labs(y = "Average Mathematics Score",
       x = "Father's Qualification",
       title = "math Scores and Father's Qualification")
```

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 12

father_qual_math + mother_qual_math
```


## Impact of Technology Assistance

```{r}
#| echo: false
computer_plot <- comp_math_read_sci_data %>%
  ggplot(aes(x=computer,
             y= math_avg,
             group = country_name)) +
  geom_point(color = "black",
               size=0.36) +
  geom_line(size = .27,
              alpha = .45) +
  theme(legend.position = "none") +
  labs(x = "Possession of Computer",
         y = "Average Mathematics Score",
         title = "Impact of Computers on Average Math Scores")


internet_plot <- int_math_read_sci_data %>%
  ggplot(aes(x=internet,
             y= math_avg,
             group = country_name )) +
  geom_point(color = "black",
               size=0.36) +
  geom_line(size = .27,
              alpha = .45) +
  theme(legend.position = "none") +
  labs(x = "Access to Internet",
         y = "Average Mathematics Score",
         title = "Impact of Internet on Average Math Scores")
```

```{r}
#| fig-width: 18
#| fig-height: 12
#| echo: false
computer_plot + internet_plot
```


## Temporal Analysis {.transition-slide .center style="text-align: center;"}

## Gender Gaps Across Subjects and Years

```{r}
#| fig-width: 18
#| fig-height: 12
#| echo: false
stu_gender_summ  <-  student %>% 
  filter(complete.cases(gender)) %>% 
  group_by(year, country, gender) %>%
  summarise_at(.vars = vars(math, read, science), 
               .funs = list(wmean = ~w_mean(., w = stu_wgt))) %>% 
  mutate(year = year %>% as.character() %>% as.integer) %>% 
  group_by(country) %>%
  filter(n() >= 10) %>% 
  ungroup() %>% 
  pivot_longer(cols = contains("_wmean"),
               names_to = "names",
               values_to = "values") %>% 
  pivot_wider(names_from = c("gender", "names"),
              values_from = "values")

stu_ggap_summ  <-  stu_gender_summ %>% 
  dplyr::transmute(
    year, country,
    gap_math_wmean = female_math_wmean - male_math_wmean,
    gap_read_wmean = female_read_wmean - male_read_wmean,
    gap_science_wmean = female_science_wmean - male_science_wmean)


stu_ggap_summ_long  <-  stu_ggap_summ %>% 
  pivot_longer(cols = contains("gap"),
               names_to = "gap_names",
               values_to = "gap_values")

stu_ggap_summ_long %>%
  ggplot(aes(x = year, y = gap_values)) +
  geom_point() +
  geom_line(aes(group = country)) +
  geom_hline(yintercept = 0, colour = "red") +
  facet_wrap(~gap_names) +
  labs(title = "Average gender gaps across subjects and years", 
       subtitle = "Gap = avg. female score - avg. male score", 
       x = "Year", 
       y = "Gender Gap Values")
```

## Highlighting Key Countries

::: {.panel-tabset}

### All Subjects
```{r}
#| fig-width: 12
#| fig-height: 6
#| echo: false
stu_ggap_summ_nest  <-  stu_ggap_summ %>%
  pivot_longer(contains("_wmean"),
               names_to = "names",
               values_to = "values") %>% 
  group_by(names) %>% 
  nest() %>% 
  mutate(f_tbl = map(.x = data, 
                     .f = ~ .x %>% 
                       as_tsibble(key = country, index = year) %>% 
                       features(values, feat_brolgar) %>% 
                       keys_near(key = country, var = range2)),
         f_data = map2(.x = data, .y = f_tbl, 
                       .f = ~ left_join(.x, .y, by = "country")))

stu_ggap_summ_plotdf  <-  stu_ggap_summ_nest %>% 
  select(names, f_data) %>% 
  unnest(f_data) %>% 
  left_join(countrycode, by = "country") %>% 
  mutate(label_stats_country = ifelse(is.na(stat), NA, paste0(stat, ":", country_name)))

stu_ggap_summ_plotdf %>% 
  ggplot(aes(x = year, y = values)) +
  geom_line(aes(group = country, colour = country)) +
  gghighlight(!is.na(stat), label_key = label_stats_country, calculate_per_facet = TRUE, keep_scales = TRUE) +
  facet_wrap(~names) + 
  labs(x = "Year",
       y = "Values", 
       title = "Highlighting key countries across all three subjects")
```

### Math
```{r}
#| fig-width: 12
#| fig-height: 5
#| echo: false
stu_gap_math_near  <-  stu_ggap_summ %>%
  as_tsibble(key = country, index = year) %>% 
  features(gap_math_wmean, feat_brolgar) %>%
  keys_near(key = country, var = median)

stu_gap_math_plotdf  <-  stu_ggap_summ %>%
  as_tibble() %>%
  left_join(stu_gap_math_near, by = "country") %>%
  left_join(countrycode, by = "country") %>%
  mutate(label_stats_country = ifelse(is.na(stat), NA, paste0(stat, ":", country_name)))

stu_gap_math_plotdf %>%
  ggplot(aes(x = year, y = gap_math_wmean,
             group = country, colour = stat)) +
  geom_line() +
  gghighlight::gghighlight(!is.na(stat), label_key = label_stats_country) + 
  labs(x = "Year", 
       y = "Values", 
       title = "Highlighting key countries for maths")
```
:::


## Limitations

::: {.callout-important}
## Data Size

Size of data would be bigger when more countries and student
:::


::: {.callout-important}
## Further Update

- The Learningtower package dataset for 2022 is scheduled to be updated to the CRAN by next month.
- A Rjournal paper according to the 2022 data would be published by Dianne Cook and Priya Dingorkar.
:::

# Thank You
